@startuml

title __JAVA's Class Diagram__\n

  namespace main.java {
    class main.java.Benchmarks {
        - configurationsDirectoryPath : String
        + Benchmarks()
        + launchBenchmarks()
    }
  }
  

  namespace main.java {
    class main.java.ConfigurationML {
        - configurationDisplay : String
        - filePath : String
        - metrics : JSONArray
        - predictiveVariables : JSONArray
        - separator : String
        - target : String
        - targetLanguage : String
        - trainSize : float
        + ConfigurationML()
        + getConfigurationDisplay()
        + getFilePath()
        + getMetrics()
        + getPredictiveVariables()
        + getSeparator()
        + getTarget()
        + getTargetLanguage()
        + getTrainSize()
        + setTargetLanguage()
    }
  }
  

  namespace main.java {
    class main.java.ExecutorBuilder {
        ~ configurationDisplay : String
        + ExecutorBuilder()
        + build()
    }
  }
  

  namespace main.java {
    class main.java.JuliaLanguageMLExecutor {
        {static} - JULIA_OUTPUT : String
        + JuliaLanguageMLExecutor()
        + generateCode()
        + run()
    }
  }
  

  namespace main.java {
    abstract class main.java.MLExecutor {
        {abstract} + generateCode()
        {abstract} + run()
    }
  }
  

  namespace main.java {
    class main.java.MLResult {
        - html_aft : String
        - html_bef : String
        - html_conf : String
        - result : String
        + MLResult()
        + getStringHtml()
        + getStringResult()
    }
  }
  

  namespace main.java {
    class main.java.MLResult2 {
        - dataset : String
        - metrics : String
        - predictive_Variables : String
        - targetLanguage : String
        - target_variable : String
        - train_size : double
        + MLResult2()
        + toString()
    }
  }
  

  namespace main.java {
    class main.java.MLresult3 {
        - filename : String
        - separator : String
        + MLresult3()
    }
  }
  

  namespace main.java {
    class main.java.MMLMain {
        {static} + main()
    }
  }
  

  namespace main.java {
    class main.java.Main {
        {static} - Filename : String
        {static} - Metrics : String
        {static} - predictive : String
        {static} - separateur : String
        {static} - targetLanguage : String
        {static} - targetVariable : String
        {static} - trainsize : double
        {static} + main()
        {static} - getFileName()
        {static} - getML()
        {static} - getMLResult()
        {static} - logInfo()
    }
  }
  

  namespace main.java {
    class main.java.Main.TestResponse {
        - response : JsonElement
        + TestResponse()
    }
  }
  

  namespace main.java {
    class main.java.PythonMLExecutor {
        - PYTHON_OUTPUT : String
        + PythonMLExecutor()
        + generateCode()
        + run()
    }
  }
  

  namespace main.java {
    class main.java.RLanguageMLExecutor {
        {static} - R_OUTPUT : String
        + RLanguageMLExecutor()
        + generateCode()
        + run()
    }
  }
  

  namespace main.java {
    enum TargetLanguage {
      JULIA
      PYTHON
      R
    }
  }
  

  main.java.ExecutorBuilder o-- main.java.MLExecutor : executor
  main.java.ExecutorBuilder o-- main.java.ConfigurationML : configuration
  main.java.JuliaLanguageMLExecutor -up-|> main.java.MLExecutor
  main.java.MLExecutor o-- main.java.ConfigurationML : configuration
  main.java.MLResult o-- main.java.ConfigurationML : configuration
  main.java.Main +-down- main.java.Main.TestResponse
  main.java.PythonMLExecutor -up-|> main.java.MLExecutor
  main.java.RLanguageMLExecutor -up-|> main.java.MLExecutor


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
